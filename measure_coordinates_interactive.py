"""
Interactive Coordinate Measurement Tool for Bybit FD Templates

This script allows you to precisely measure text coordinates by clicking on the template image.
Results are automatically saved to bybit_fd_config.py

Usage:
1. Run: python measure_coordinates_interactive.py
2. Click on positions where text should be placed
3. Press Enter to move to next measurement
4. Script updates bybit_fd_config.py automatically
"""

import cv2
import numpy as np
from PIL import Image
from typing import List, Tuple, Dict

class CoordinateMeasurer:
    def __init__(self, template_path: str):
        self.template_path = template_path
        self.img = cv2.imread(template_path)
        if self.img is None:
            raise FileNotFoundError(f"Cannot load template: {template_path}")

        self.img_height, self.img_width = self.img.shape[:2]
        self.current_point = None
        self.window_name = "Coordinate Measurement Tool"

        # Collected coordinates
        self.y_positions: List[int] = []
        self.column_x: Dict[str, int] = {}

    def mouse_callback(self, event, x, y, flags, param):
        """Handle mouse events."""
        if event == cv2.EVENT_MOUSEMOVE:
            self.current_point = (x, y)
            self.update_display()
        elif event == cv2.EVENT_LBUTTONDOWN:
            self.clicked_point = (x, y)
            print(f"‚úì –ó–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É: X={x}, Y={y}")

    def update_display(self):
        """Update display with current mouse position and coordinates."""
        display = self.img.copy()

        # Draw crosshair at mouse position
        if self.current_point:
            x, y = self.current_point
            cv2.line(display, (x, 0), (x, self.img_height), (0, 255, 0), 1)
            cv2.line(display, (0, y), (self.img_width, y), (0, 255, 0), 1)

            # Show coordinates
            text = f"X: {x}, Y: {y}"
            cv2.putText(display, text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX,
                       1, (0, 255, 0), 2)

        # Show collected points
        for idx, y_pos in enumerate(self.y_positions):
            cv2.line(display, (0, y_pos), (self.img_width, y_pos), (255, 0, 0), 1)
            cv2.putText(display, f"Row {idx+1}", (10, y_pos-5),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

        for col_name, x_pos in self.column_x.items():
            cv2.line(display, (x_pos, 0), (x_pos, self.img_height), (0, 0, 255), 1)
            cv2.putText(display, col_name, (x_pos+5, 30),
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)

        cv2.imshow(self.window_name, display)

    def measure_rows(self, num_rows: int = 11) -> List[int]:
        """Measure Y positions for table rows."""
        print(f"\nüìè –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è {num_rows} —Ä—è–¥–∫—ñ–≤")
        print("=" * 60)
        print("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
        print("  1. –ù–∞–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –ë–ê–ó–û–í–£ –õ–Ü–ù–Ü–Æ —Ç–µ–∫—Å—Ç—É –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞")
        print("  2. –ö–ª—ñ–∫–Ω—ñ—Ç—å –ª—ñ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ")
        print("  3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ENTER –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞")
        print("  4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'q' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤")
        print("=" * 60)

        cv2.namedWindow(self.window_name, cv2.WINDOW_NORMAL)
        cv2.setMouseCallback(self.window_name, self.mouse_callback)
        self.update_display()

        for row_idx in range(num_rows):
            self.clicked_point = None
            print(f"\n‚û§ –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ {row_idx + 1}/{num_rows}")
            print("  –ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –±–∞–∑–æ–≤—É –ª—ñ–Ω—ñ—é —Ç–µ–∫—Å—Ç—É, –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ENTER...")

            while True:
                key = cv2.waitKey(1) & 0xFF
                if key == 13:  # Enter
                    if self.clicked_point:
                        y_coord = self.clicked_point[1]
                        self.y_positions.append(y_coord)
                        print(f"  ‚úì –†—è–¥–æ–∫ {row_idx + 1}: Y = {y_coord}")
                        break
                    else:
                        print("  ‚ö† –°–ø–æ—á–∞—Ç–∫—É –∫–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é!")
                elif key == ord('q'):
                    print("\n‚èπ –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ")
                    return self.y_positions

        print(f"\n‚úÖ –í—Å—ñ {len(self.y_positions)} —Ä—è–¥–∫—ñ–≤ –≤–∏–º—ñ—Ä—è–Ω–æ!")
        return self.y_positions

    def measure_columns(self) -> Dict[str, int]:
        """Measure X positions for table columns."""
        columns = [
            ("MONEDA_X", "Moneda (Currency)"),
            ("BANCO_X", "Banco (Bank)"),
            ("TIEMPO_X", "Tiempo (Time)"),
            ("ESTADO_X", "Estado (Status)"),
            ("MONTO_X", "Monto (Amount)"),
            ("NUMERO_CUENTA_X", "Numero de cuenta (Account)")
        ]

        print(f"\nüìè –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
        print("=" * 60)
        print("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
        print("  1. –ù–∞–≤–µ–¥—ñ—Ç—å –∫—É—Ä—Å–æ—Ä –Ω–∞ –¶–ï–ù–¢–† –∫–æ–ª–æ–Ω–∫–∏ (–¥–ª—è center alignment)")
        print("  2. –ö–ª—ñ–∫–Ω—ñ—Ç—å –ª—ñ–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ")
        print("  3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ENTER –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏")
        print("  4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'q' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫")
        print("=" * 60)

        for col_name, col_description in columns:
            self.clicked_point = None
            print(f"\n‚û§ –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏: {col_description}")
            print("  –ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ —Ü–µ–Ω—Ç—Ä –∫–æ–ª–æ–Ω–∫–∏, –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ENTER...")

            while True:
                key = cv2.waitKey(1) & 0xFF
                if key == 13:  # Enter
                    if self.clicked_point:
                        x_coord = self.clicked_point[0]
                        self.column_x[col_name] = x_coord
                        print(f"  ‚úì {col_name}: X = {x_coord}")
                        self.update_display()
                        break
                    else:
                        print("  ‚ö† –°–ø–æ—á–∞—Ç–∫—É –∫–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –ø–æ–∑–∏—Ü—ñ—é!")
                elif key == ord('q'):
                    print("\n‚èπ –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ")
                    return self.column_x

        print(f"\n‚úÖ –í—Å—ñ {len(self.column_x)} –∫–æ–ª–æ–Ω–æ–∫ –≤–∏–º—ñ—Ä—è–Ω–æ!")
        return self.column_x

    def save_to_config(self, config_path: str = "_utils/bybit_fd_config.py"):
        """Save measured coordinates to config file."""
        print(f"\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É {config_path}...")

        # Read current config
        with open(config_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # Prepare new content
        new_lines = []
        in_y_positions = False
        in_x_positions = False
        skip_until_bracket = False

        for line in lines:
            # Handle Y_POSITIONS section
            if 'Y_POSITIONS = [' in line:
                in_y_positions = True
                new_lines.append('Y_POSITIONS = [\n')
                for idx, y_pos in enumerate(self.y_positions):
                    new_lines.append(f'    {y_pos},   # Row {idx + 1}\n')
                new_lines.append(']\n')
                skip_until_bracket = True
                continue

            if skip_until_bracket and ']' in line and in_y_positions:
                in_y_positions = False
                skip_until_bracket = False
                continue

            if in_y_positions:
                continue

            # Handle X positions
            if 'MONEDA_X' in line:
                in_x_positions = True

            if in_x_positions:
                if 'MONEDA_X' in line:
                    new_lines.append(f'MONEDA_X = {self.column_x.get("MONEDA_X", 680)}                    # "Moneda" (Currency) column\n')
                elif 'BANCO_X' in line:
                    new_lines.append(f'BANCO_X = {self.column_x.get("BANCO_X", 860)}                     # "Banco" (Bank) column\n')
                elif 'TIEMPO_X' in line:
                    new_lines.append(f'TIEMPO_X = {self.column_x.get("TIEMPO_X", 1080)}                   # "Tiempo" column\n')
                elif 'ESTADO_X' in line:
                    new_lines.append(f'ESTADO_X = {self.column_x.get("ESTADO_X", 1350)}                   # "Estado" column\n')
                elif 'MONTO_X' in line:
                    new_lines.append(f'MONTO_X = {self.column_x.get("MONTO_X", 1800)}                    # "Monto" column\n')
                elif 'NUMERO_CUENTA_X' in line:
                    new_lines.append(f'NUMERO_CUENTA_X = {self.column_x.get("NUMERO_CUENTA_X", 2150)}            # "Numero de cuenta" column\n')
                    in_x_positions = False
                else:
                    new_lines.append(line)
            else:
                new_lines.append(line)

        # Write updated config
        with open(config_path, 'w', encoding='utf-8') as f:
            f.writelines(new_lines)

        print(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {config_path}")

    def run(self):
        """Run the interactive measurement tool."""
        print("\n" + "=" * 60)
        print("üéØ –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –Ü–ù–°–¢–†–£–ú–ï–ù–¢ –í–ò–ú–Ü–†–Æ–í–ê–ù–ù–Ø –ö–û–û–†–î–ò–ù–ê–¢")
        print("=" * 60)
        print(f"–®–∞–±–ª–æ–Ω: {self.template_path}")
        print(f"–†–æ–∑–º—ñ—Ä: {self.img_width} √ó {self.img_height} px")
        print("=" * 60)

        # Measure rows first
        self.measure_rows(num_rows=11)

        # Then measure columns
        self.measure_columns()

        # Show summary
        print("\n" + "=" * 60)
        print("üìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ú–Ü–†–Æ–í–ê–ù–¨")
        print("=" * 60)
        print(f"\nY-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ ({len(self.y_positions)} —Ä—è–¥–∫—ñ–≤):")
        for idx, y_pos in enumerate(self.y_positions):
            print(f"  Row {idx + 1}: Y = {y_pos}")

        print(f"\nX-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ ({len(self.column_x)} –∫–æ–ª–æ–Ω–æ–∫):")
        for col_name, x_pos in self.column_x.items():
            print(f"  {col_name}: X = {x_pos}")

        # Ask to save
        print("\n" + "=" * 60)
        response = input("\nüíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —É bybit_fd_config.py? (y/n): ")
        if response.lower() == 'y':
            self.save_to_config()
            print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            print("\n‚èπ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

        cv2.destroyAllWindows()


def main():
    template_path = "templates/Group 1312320191.png"

    try:
        measurer = CoordinateMeasurer(template_path)
        measurer.run()
    except FileNotFoundError as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª templates/Group 1312320191.png —ñ—Å–Ω—É—î.")
    except Exception as e:
        print(f"\n‚ùå –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
