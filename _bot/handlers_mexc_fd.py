"""
MEXC FD Handlers

Handles the conversation flow for collecting MEXC FD transaction data.
Structure: 10 rows √ó 6 columns
Questions are in Ukrainian.
"""
import os
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from _bot.keyboards import get_continue_keyboard
from _bot.states import MEXCFDStates
from _modifiers_photo.mexcfd_withdraw_history import render_mexc_fd
import config

router = Router()


def get_currency_keyboard():
    """Create keyboard with currency options."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ARS"), KeyboardButton(text="COP")],
            [KeyboardButton(text="CLP"), KeyboardButton(text="USD")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


@router.callback_query(F.data == "select_mexc_fd")
async def select_mexc_fd(callback: CallbackQuery, state: FSMContext):
    """Handle MEXC FD selection from main menu."""
    await callback.answer()

    # TEST MODE: Auto-fill all data and generate screenshot
    if config.TEST_MODE:
        await callback.message.answer("üß™ <b>TEST MODE –ê–ö–¢–ò–í–ù–ò–ô</b>\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...", parse_mode="HTML")

        # Fill all test data
        await state.update_data(**config.MEXC_FD_TEST_DATA)

        # Generate screenshot immediately
        await callback.message.answer("‚è≥ –ì–µ–Ω–µ—Ä—É—é —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ 10 —Ä—è–¥–∫–∞–º–∏ √ó 6 –∫–æ–ª–æ–Ω–∫–∞–º–∏...")

        try:
            data = await state.get_data()
            os.makedirs(config.OUTPUT_DIR, exist_ok=True)
            output_path = os.path.join(config.OUTPUT_DIR, f"mexc_fd_{callback.from_user.id}.png")

            # Map currency to template filename
            currency = data["currency"]
            currency_template_map = {
                "CLP": "templates/mexc_fd/SD_CLP_MEXCFD_WITHDRAW_HISTORY.png",
                "COP": "templates/mexc_fd/SH_COP_MEXCFD_WITHDRAW_HISTORY.png",
                "ARS": "templates/mexc_fd/SR_ARS_MEXCFD_WITHDRAW_HISTORY.png",
                "USD": "templates/mexc_fd/SR_USD_MEXCFD_WITHDRAW_HISTORY.png"
            }

            if currency not in currency_template_map:
                await callback.message.answer(f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–ª—è MEXC FD")
                await state.clear()
                return

            template_path = currency_template_map[currency]

            result_path = render_mexc_fd(
                currency=data["currency"],
                lead_bank=data["lead_bank"],
                acter_bank=data["acter_bank"],
                lead_time=data["lead_time"],
                acter_time=data["acter_time"],
                fee_1=data["fee_1"],
                fee_2=data["fee_2"],
                fee_3=data["fee_3"],
                fee_4=data["fee_4"],
                lead_address=data["lead_address"],
                acter_address=data["acter_address"],
                template_path=template_path,
                output_path=output_path
            )

            photo = FSInputFile(result_path)
            await callback.message.answer_photo(
                photo,
                caption="‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç MEXC FD –≥–æ—Ç–æ–≤–∏–π! (TEST MODE)\n"
                        "10 —Ä—è–¥–∫—ñ–≤ √ó 6 –∫–æ–ª–æ–Ω–æ–∫ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ.",
                reply_markup=get_continue_keyboard()
            )

            await state.clear()
            return

        except Exception as e:
            await callback.message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É: {str(e)}")
            await state.clear()
            return

    # NORMAL MODE: Original logic
    await callback.message.answer(
        "üí± <b>MEXC FD - Transaction History</b>\n\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 10 —Ä—è–¥–∫—ñ–≤ √ó 6 –∫–æ–ª–æ–Ω–æ–∫\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 1, –≤—Å—ñ 10 —Ä—è–¥–∫—ñ–≤):",
        reply_markup=get_currency_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_currency)


@router.message(MEXCFDStates.waiting_currency)
async def process_currency(message: Message, state: FSMContext):
    """Process currency selection (fills column 1, all 10 rows)."""
    currency = message.text.strip().upper()

    if currency not in ["ARS", "COP", "CLP", "USD"]:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –≤–∞–ª—é—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å: ARS, COP, CLP –∞–±–æ USD",
            reply_markup=get_currency_keyboard()
        )
        return

    await state.update_data(currency=currency)
    await message.answer(
        "üè¶ –í–≤–µ–¥—ñ—Ç—å –±–∞–Ω–∫ –ª—ñ–¥–∞ (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 2, —Ä—è–¥–∫–∏ 1-9)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: Banco Galicia, BBVA, Santander</i>",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_lead_bank)


@router.message(MEXCFDStates.waiting_lead_bank)
async def process_lead_bank(message: Message, state: FSMContext):
    """Process lead bank name (fills column 2, rows 1-9)."""
    await state.update_data(lead_bank=message.text.strip())
    await message.answer(
        "üè¶ –í–≤–µ–¥—ñ—Ç—å –±–∞–Ω–∫ –∞–∫—Ç–µ—Ä–∞ (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 2, —Ä—è–¥–æ–∫ 10)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: Banco Santander</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_acter_bank)


@router.message(MEXCFDStates.waiting_acter_bank)
async def process_acter_bank(message: Message, state: FSMContext):
    """Process acter bank name (fills column 2, row 10)."""
    await state.update_data(acter_bank=message.text.strip())
    await message.answer(
        "üìÖ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 3, —Ä—è–¥–∫–∏ 1-9)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: Hace 2 d√≠as, Hace una semana</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_lead_time)


@router.message(MEXCFDStates.waiting_lead_time)
async def process_lead_time(message: Message, state: FSMContext):
    """Process lead time (fills column 3, rows 1-9)."""
    await state.update_data(lead_time=message.text.strip())
    await message.answer(
        "üìÖ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–∫—Ç–µ—Ä–∞ (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 3, —Ä—è–¥–æ–∫ 10)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: Hace 1 d√≠a</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_acter_time)


@router.message(MEXCFDStates.waiting_acter_time)
async def process_acter_time(message: Message, state: FSMContext):
    """Process acter time (fills column 3, row 10)."""
    await state.update_data(acter_time=message.text.strip())
    await message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó #1 (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 5, —Ä—è–¥–∫–∏ 1, 3, 5)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: 500.00</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_fee_1)


@router.message(MEXCFDStates.waiting_fee_1)
async def process_fee_1(message: Message, state: FSMContext):
    """Process fee 1 (fills column 5, rows 1, 3, 5)."""
    await state.update_data(fee_1=message.text.strip())
    await message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó #2 (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 5, —Ä—è–¥–∫–∏ 2, 8)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: 750.00</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_fee_2)


@router.message(MEXCFDStates.waiting_fee_2)
async def process_fee_2(message: Message, state: FSMContext):
    """Process fee 2 (fills column 5, rows 2, 8)."""
    await state.update_data(fee_2=message.text.strip())
    await message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó #3 (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 5, —Ä—è–¥–∫–∏ 4, 6, 7, 9)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: 1000.00</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_fee_3)


@router.message(MEXCFDStates.waiting_fee_3)
async def process_fee_3(message: Message, state: FSMContext):
    """Process fee 3 (fills column 5, rows 4, 6, 7, 9)."""
    await state.update_data(fee_3=message.text.strip())
    await message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∫–æ–º—ñ—Å—ñ—ó #4 (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 5, —Ä—è–¥–æ–∫ 10)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: 1250.00</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_fee_4)


@router.message(MEXCFDStates.waiting_fee_4)
async def process_fee_4(message: Message, state: FSMContext):
    """Process fee 4 (fills column 5, row 10)."""
    await state.update_data(fee_4=message.text.strip())
    await message.answer(
        "üî¢ –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤–∏–≤–æ–¥—É –ª—ñ–¥–∞ (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 6, —Ä—è–¥–∫–∏ 1-9)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: 3001382195******</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_lead_address)


@router.message(MEXCFDStates.waiting_lead_address)
async def process_lead_address(message: Message, state: FSMContext):
    """Process lead address (fills column 6, rows 1-9)."""
    await state.update_data(lead_address=message.text.strip())
    await message.answer(
        "üî¢ –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≤–∏–≤–æ–¥—É –∞–∫—Ç–µ—Ä–∞ (–∑–∞–ø–æ–≤–Ω–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É 6, —Ä—è–¥–æ–∫ 10)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: 3001234567******</i>",
        parse_mode="HTML"
    )
    await state.set_state(MEXCFDStates.waiting_acter_address)


@router.message(MEXCFDStates.waiting_acter_address)
async def process_acter_address(message: Message, state: FSMContext):
    """Process acter address and generate final screenshot."""
    await state.update_data(acter_address=message.text.strip())

    # Get all collected data
    data = await state.get_data()

    # Show summary
    await message.answer(
        "üìä <b>–ó—ñ–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ:</b>\n\n"
        f"üí± –í–∞–ª—é—Ç–∞: {data['currency']}\n"
        f"üè¶ –ë–∞–Ω–∫ –ª—ñ–¥–∞: {data['lead_bank']}\n"
        f"üè¶ –ë–∞–Ω–∫ –∞–∫—Ç–µ—Ä–∞: {data['acter_bank']}\n"
        f"üìÖ –ß–∞—Å –ª—ñ–¥–∞: {data['lead_time']}\n"
        f"üìÖ –ß–∞—Å –∞–∫—Ç–µ—Ä–∞: {data['acter_time']}\n"
        f"üí∞ –ö–æ–º—ñ—Å—ñ—è #1 (—Ä—è–¥–∫–∏ 1,3,5): {data['fee_1']}\n"
        f"üí∞ –ö–æ–º—ñ—Å—ñ—è #2 (—Ä—è–¥–∫–∏ 2,8): {data['fee_2']}\n"
        f"üí∞ –ö–æ–º—ñ—Å—ñ—è #3 (—Ä—è–¥–∫–∏ 4,6,7,9): {data['fee_3']}\n"
        f"üí∞ –ö–æ–º—ñ—Å—ñ—è #4 (—Ä—è–¥–æ–∫ 10): {data['fee_4']}\n"
        f"üî¢ –ê–¥—Ä–µ—Å–∞ –ª—ñ–¥–∞: {data['lead_address']}\n"
        f"üî¢ –ê–¥—Ä–µ—Å–∞ –∞–∫—Ç–µ—Ä–∞: {data['acter_address']}\n\n"
        "‚è≥ –ì–µ–Ω–µ—Ä—É—é —Å–∫—Ä—ñ–Ω—à–æ—Ç...",
        parse_mode="HTML"
    )

    try:
        # Create output directory if it doesn't exist
        os.makedirs(config.OUTPUT_DIR, exist_ok=True)
        output_path = os.path.join(config.OUTPUT_DIR, f"mexc_fd_{message.from_user.id}.png")

        # Map currency to template filename
        currency = data["currency"]
        currency_template_map = {
            "CLP": "templates/mexc_fd/SD_CLP_MEXCFD_WITHDRAW_HISTORY.png",
            "COP": "templates/mexc_fd/SH_COP_MEXCFD_WITHDRAW_HISTORY.png",
            "ARS": "templates/mexc_fd/SR_ARS_MEXCFD_WITHDRAW_HISTORY.png",
            "USD": "templates/mexc_fd/SR_USD_MEXCFD_WITHDRAW_HISTORY.png"
        }

        if currency not in currency_template_map:
            await message.answer(
                f"‚ùå –í–∞–ª—é—Ç–∞ {currency} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–ª—è MEXC FD\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–ª—é—Ç–∏: CLP, COP, ARS, USD",
                reply_markup=get_continue_keyboard()
            )
            await state.clear()
            return

        template_path = currency_template_map[currency]

        # Generate screenshot
        result_path = render_mexc_fd(
            currency=data["currency"],
            lead_bank=data["lead_bank"],
            acter_bank=data["acter_bank"],
            lead_time=data["lead_time"],
            acter_time=data["acter_time"],
            fee_1=data["fee_1"],
            fee_2=data["fee_2"],
            fee_3=data["fee_3"],
            fee_4=data["fee_4"],
            lead_address=data["lead_address"],
            acter_address=data["acter_address"],
            template_path=template_path,
            output_path=output_path
        )

        # Send the generated screenshot
        photo = FSInputFile(result_path)
        await message.answer_photo(
            photo,
            caption=(
                "‚úÖ <b>–°–∫—Ä—ñ–Ω—à–æ—Ç MEXC FD —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\n"
                "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 10 —Ä—è–¥–∫—ñ–≤ √ó 6 –∫–æ–ª–æ–Ω–æ–∫\n"
                "‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 1 (Cripto): –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—Å—ñ—Ö —Ä—è–¥–∫—ñ–≤\n"
                "‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 2 (Banco): –±–∞–Ω–∫ –ª—ñ–¥–∞ (1-9), –±–∞–Ω–∫ –∞–∫—Ç–µ—Ä–∞ (10)\n"
                "‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 3 (Tiempo): —á–∞—Å –ª—ñ–¥–∞ (1-9), —á–∞—Å –∞–∫—Ç–µ—Ä–∞ (10)\n"
                "‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 4 (Estado): 'Retiro Exitoso' (1-9), 'Reposici√≥n' (10)\n"
                "‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 5 (Monto): –∫–æ–º—ñ—Å—ñ—ó —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω—ñ –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏\n"
                "‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞ 6 (Direcci√≥n): –∞–¥—Ä–µ—Å–∞ –ª—ñ–¥–∞ (1-9), –∞–¥—Ä–µ—Å–∞ –∞–∫—Ç–µ—Ä–∞ (10)"
            ),
            reply_markup=get_continue_keyboard(),
            parse_mode="HTML"
        )

        await state.clear()

    except Exception as e:
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É:\n{str(e)}\n\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
            reply_markup=get_continue_keyboard()
        )
        await state.clear()
