from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from _bot.keyboards import get_main_selection_keyboard

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command."""
    await state.clear()
    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤.\n\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /kb –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞.",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command."""
    await message.answer(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
        "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "/kb - –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n\n"
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ —Ç–∞ —Å–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º."
    )


@router.message(Command("kb"))
async def cmd_keyboard(message: Message, state: FSMContext):
    """Handle /kb command - show main selection keyboard."""
    await state.clear()
    # Remove old reply keyboard first
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    # Then show inline keyboard
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞:",
        reply_markup=get_main_selection_keyboard()
    )


@router.callback_query(F.data == "back_to_menu")
async def process_back_to_menu(callback: CallbackQuery, state: FSMContext):
    """Handle back to menu button."""
    await state.clear()
    await callback.answer()
    await callback.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞:",
        reply_markup=get_main_selection_keyboard()
    )


@router.callback_query(F.data == "create_another")
async def process_create_another(callback: CallbackQuery, state: FSMContext):
    """Handle create another screenshot button."""
    await state.clear()
    await callback.answer()
    await callback.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞:",
        reply_markup=get_main_selection_keyboard()
    )
