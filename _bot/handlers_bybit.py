"""
Bybit Withdraw History Handlers

Handles the conversation flow for collecting Bybit withdrawal history data.
Questions are in Ukrainian.
"""
import os
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext

from _bot.keyboards import get_continue_keyboard
from _bot.states import BybitWithdrawStates
from _modifiers_photo.bybit_withdraw_clp import render_bybit_clp_withdraw_history
from _modifiers_photo.bybit_withdraw_mxn import render_bybit_mxn_withdraw_history
from _modifiers_photo.bybit_withdraw_ved import render_bybit_ved_withdraw_history
import config

router = Router()


def get_currency_keyboard():
    """Create keyboard with currency options."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="CLP"), KeyboardButton(text="MXN"), KeyboardButton(text="VED")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return keyboard


@router.callback_query(F.data == "select_bybit")
async def select_bybit_withdraw(callback: CallbackQuery, state: FSMContext):
    """Handle Bybit withdrawal history selection from main menu."""
    await callback.answer()
    await callback.message.answer(
        "üè¶ <b>Bybit - –Ü—Å—Ç–æ—Ä—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:",
        reply_markup=get_currency_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_currency)


@router.message(BybitWithdrawStates.waiting_currency)
async def process_currency(message: Message, state: FSMContext):
    """Process currency selection (step 1/9)."""
    currency = message.text.strip().upper()

    if currency not in ["CLP", "MXN", "VED"]:
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –≤–∞–ª—é—Ç–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å: CLP, MXN –∞–±–æ VED",
            reply_markup=get_currency_keyboard()
        )
        return

    await state.update_data(currency=currency)
    await message.answer(
        "üìÖ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: Hace un mes, Hace 2 d√≠as, Hace una semana</i>",
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_time)


@router.message(BybitWithdrawStates.waiting_time)
async def process_time(message: Message, state: FSMContext):
    """Process transaction time (step 2/9)."""
    await state.update_data(time_in_description=message.text.strip())
    await message.answer(
        "üè¶ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±–∞–Ω–∫—É\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: Falabella, Banco Estado, Santander</i>",
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_bank)


@router.message(BybitWithdrawStates.waiting_bank)
async def process_bank(message: Message, state: FSMContext):
    """Process bank name (step 3/9)."""
    await state.update_data(lead_bank=message.text.strip())
    await message.answer(
        "üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É –õ—ñ–¥–∞ (–±–µ–∑ ****)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: 1999659</i>",
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_lead_number)


@router.message(BybitWithdrawStates.waiting_lead_number)
async def process_lead_number(message: Message, state: FSMContext):
    """Process lead account number (step 4/9)."""
    await state.update_data(lead_number=message.text.strip())
    await message.answer(
        "üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É –ü–µ—Ä—Å–æ–Ω–∞–∂–∞ (–±–µ–∑ ****)\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥: 1509208</i>",
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_persa_number)


@router.message(BybitWithdrawStates.waiting_persa_number)
async def process_persa_number(message: Message, state: FSMContext):
    """Process persa account number (step 5/9)."""
    await state.update_data(persa_number=message.text.strip())
    await message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –õ—ñ–¥–∞ 10\n"
        "<i>–ó'—è–≤–∏—Ç—å—Å—è –≤ —Ä—è–¥–∫–∞—Ö 1 —ñ 3. –ü—Ä–∏–∫–ª–∞–¥: 488.323</i>",
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_transaction_lead_10)


@router.message(BybitWithdrawStates.waiting_transaction_lead_10)
async def process_transaction_lead_10(message: Message, state: FSMContext):
    """Process transaction lead 10 amount (step 6/9)."""
    await state.update_data(transaction_lead_10=message.text.strip())
    await message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –õ—ñ–¥–∞\n"
        "<i>–ó'—è–≤–∏—Ç—å—Å—è –≤ —Ä—è–¥–∫–∞—Ö 2 —ñ 4. –ü—Ä–∏–∫–ª–∞–¥: 241.579</i>",
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_transaction_lead_main)


@router.message(BybitWithdrawStates.waiting_transaction_lead_main)
async def process_transaction_lead_main(message: Message, state: FSMContext):
    """Process transaction lead main amount (step 7/9)."""
    await state.update_data(transaction_lead_main=message.text.strip())
    await message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –õ—ñ–¥–∞ 11\n"
        "<i>–ó'—è–≤–∏—Ç—å—Å—è –≤ —Ä—è–¥–∫—É 5. –ü—Ä–∏–∫–ª–∞–¥: 620.000</i>",
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_transaction_lead_11)


@router.message(BybitWithdrawStates.waiting_transaction_lead_11)
async def process_transaction_lead_11(message: Message, state: FSMContext):
    """Process transaction lead 11 amount (step 8/9)."""
    await state.update_data(transaction_lead_11=message.text.strip())
    await message.answer(
        "üí∞ –í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –≤–∏–ø–ª–∞—Ç–∏\n"
        "<i>–ó'—è–≤–∏—Ç—å—Å—è –≤ —Ä—è–¥–∫—É 6. –ü—Ä–∏–∫–ª–∞–¥: 4.911.820</i>",
        parse_mode="HTML"
    )
    await state.set_state(BybitWithdrawStates.waiting_total_payout)


@router.message(BybitWithdrawStates.waiting_total_payout)
async def process_total_payout(message: Message, state: FSMContext):
    """Process total payout amount (step 9/9) and generate screenshot."""
    await state.update_data(total_payout=message.text.strip())

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä—É—é —Å–∫—Ä—ñ–Ω—à–æ—Ç...")

    try:
        data = await state.get_data()

        # Create output directory
        os.makedirs(config.OUTPUT_DIR, exist_ok=True)
        output_path = os.path.join(config.OUTPUT_DIR, f"bybit_{message.from_user.id}.png")

        # Select the appropriate modifier based on currency
        currency = data["currency"]

        if currency == "CLP":
            template_path = "templates/bybit_clp_withdraw_history.png"
            result_path = render_bybit_clp_withdraw_history(
                transaction_lead_10=data["transaction_lead_10"],
                transaction_lead_main=data["transaction_lead_main"],
                transaction_lead_11=data["transaction_lead_11"],
                total_payout=data["total_payout"],
                lead_bank=data["lead_bank"],
                lead_number=data["lead_number"],
                persa_number=data["persa_number"],
                time_in_description=data["time_in_description"],
                template_path=template_path,
                output_path=output_path
            )
        elif currency == "MXN":
            template_path = "templates/bybit_mxn_withdraw_history.png"
            result_path = render_bybit_mxn_withdraw_history(
                transaction_lead_10=data["transaction_lead_10"],
                transaction_lead_main=data["transaction_lead_main"],
                transaction_lead_11=data["transaction_lead_11"],
                total_payout=data["total_payout"],
                lead_bank=data["lead_bank"],
                lead_number=data["lead_number"],
                persa_number=data["persa_number"],
                time_in_description=data["time_in_description"],
                template_path=template_path,
                output_path=output_path
            )
        elif currency == "VED":
            template_path = "templates/bybit_ved_withdraw_history.png"
            result_path = render_bybit_ved_withdraw_history(
                transaction_lead_10=data["transaction_lead_10"],
                transaction_lead_main=data["transaction_lead_main"],
                transaction_lead_11=data["transaction_lead_11"],
                total_payout=data["total_payout"],
                lead_bank=data["lead_bank"],
                lead_number=data["lead_number"],
                persa_number=data["persa_number"],
                time_in_description=data["time_in_description"],
                template_path=template_path,
                output_path=output_path
            )

        # Send the generated screenshot
        photo = FSInputFile(result_path)
        await message.answer_photo(
            photo,
            caption="‚úÖ –°–∫—Ä—ñ–Ω—à–æ—Ç —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∏–≤–µ–¥–µ–Ω–Ω—è Bybit –≥–æ—Ç–æ–≤–∏–π!",
            reply_markup=get_continue_keyboard()
        )

        await state.clear()

    except FileNotFoundError as e:
        await message.answer(
            f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {str(e)}\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —ñ—Å–Ω—É—î templates/bybit_{currency.lower()}_withdraw_history.png"
        )
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É: {str(e)}")
        await state.clear()
